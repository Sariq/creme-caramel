{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _helpers = require(\"./helpers\");\n\nvar defaults = {\n  timeout: 4500,\n  interval: 50\n};\n/**\n * Waits for the expectation to pass and returns a Promise\n *\n * @param  expectation  Function  Expectation that has to complete without throwing\n * @param  timeout  Number  Maximum wait interval, 4500ms by default\n * @param  interval  Number  Wait-between-retries interval, 50ms by default\n * @return  Promise  Promise to return a callback result\n */\n\nvar waitForExpect = function waitForExpect(expectation) {\n  var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaults.timeout;\n  var interval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaults.interval;\n  var setTimeout = (0, _helpers.getSetTimeoutFn)(); // eslint-disable-next-line no-param-reassign\n\n  if (interval < 1) interval = 1;\n  var maxTries = Math.ceil(timeout / interval);\n  var tries = 0;\n  return new Promise(function (resolve, reject) {\n    var rejectOrRerun = function rejectOrRerun(error) {\n      if (tries > maxTries) {\n        reject(error);\n        return;\n      } // eslint-disable-next-line no-use-before-define\n\n\n      setTimeout(runExpectation, interval);\n    };\n\n    function runExpectation() {\n      tries += 1;\n\n      try {\n        Promise.resolve(expectation()).then(function () {\n          return resolve();\n        }).catch(rejectOrRerun);\n      } catch (error) {\n        rejectOrRerun(error);\n      }\n    }\n\n    setTimeout(runExpectation, 0);\n  });\n};\n\nwaitForExpect.defaults = defaults;\nvar _default = waitForExpect;\nexports.default = _default;\nmodule.exports = exports.default;\nmodule.exports.default = exports.default;","map":null,"metadata":{},"sourceType":"script"}