{"ast":null,"code":"import _initializerDefineProperty from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _temp;\n\nimport { observable, action, computed } from \"mobx\";\nimport ConfigStore from \"./configStore\";\nconst apis = {\n  login(data) {\n    fetch(ConfigStore.configData.domain + 'api/users/login', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"user\": {\n          \"email\": \"sari.q34@gmail.com\",\n          \"password\": \"1298\"\n        }\n      })\n    }).then(response => response.json()).then(responseJson => {\n      if (responseJson.user) {\n        console.log(responseJson.user.userData);\n        this.userData = responseJson.user.userData;\n      } else {}\n\n      return responseJson;\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n};\nlet AuthStore = (_class = (_temp = class AuthStore {\n  constructor() {\n    _initializerDefineProperty(this, \"userData\", _descriptor, this);\n  }\n\n  login() {\n    apis.login();\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"userData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return null;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"login\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"login\"), _class.prototype)), _class);\nexport default new AuthStore();","map":{"version":3,"sources":["/Users/sariq/projects/us-dv/client/us-dv/src/stores/AuthStore.js"],"names":["observable","action","computed","ConfigStore","apis","login","data","fetch","configData","domain","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","user","console","log","userData","catch","error","AuthStore"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA4C,MAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,IAAI,GAAG;AACTC,EAAAA,KAAK,CAACC,IAAD,EAAM;AACPC,IAAAA,KAAK,CAACJ,WAAW,CAACK,UAAZ,CAAuBC,MAAvB,GAAgC,iBAAjC,EAAoD;AACrDC,MAAAA,MAAM,EAAE,MAD6C;AAErDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAF4C;AAMrDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,gBAAQ;AACN,mBAAS,oBADH;AAEN,sBAAY;AAFN;AADW,OAAf;AAN+C,KAApD,CAAL,CAaGC,IAbH,CAaSC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAbtB,EAcGF,IAdH,CAcSG,YAAD,IAAkB;AACtB,UAAGA,YAAY,CAACC,IAAhB,EAAqB;AACnBC,QAAAA,OAAO,CAACC,GAAR,CAAYH,YAAY,CAACC,IAAb,CAAkBG,QAA9B;AACA,aAAKA,QAAL,GAAgBJ,YAAY,CAACC,IAAb,CAAkBG,QAAlC;AACD,OAHD,MAGK,CACJ;;AACD,aAAOJ,YAAP;AACD,KArBH,EAsBGK,KAtBH,CAsBUC,KAAD,IAAW;AAChBJ,MAAAA,OAAO,CAACI,KAAR,CAAcA,KAAd;AACD,KAxBH;AAyBH;;AA3BQ,CAAb;IA6BMC,S,sBAAN,MAAMA,SAAN,CAAgB;AAAA;AAAA;AAAA;;AAGJrB,EAAAA,KAAR,GAAiB;AACbD,IAAAA,IAAI,CAACC,KAAL;AACH;;AALW,C,kFACXL,U;;;;;WAAoB,I;;0DAEpBC,M;AAIL,eAAe,IAAIyB,SAAJ,EAAf","sourcesContent":["import { observable, action, computed} from \"mobx\";\nimport ConfigStore from \"./configStore\"\n\nconst apis = {\n    login(data){\n        fetch(ConfigStore.configData.domain + 'api/users/login', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              \"user\": {\n                \"email\": \"sari.q34@gmail.com\",\n                \"password\": \"1298\"\n              }\n            }),\n          })\n          .then((response) => response.json())\n          .then((responseJson) => {\n            if(responseJson.user){\n              console.log(responseJson.user.userData)\n              this.userData = responseJson.user.userData;\n            }else{\n            }        \n            return responseJson;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n    }\n}\nclass AuthStore {\n    @observable userData=null;\n\n    @action login () {\n        apis.login();\n    };\n}\nexport default new AuthStore();"]},"metadata":{},"sourceType":"module"}