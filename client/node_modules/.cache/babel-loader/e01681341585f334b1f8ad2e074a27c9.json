{"ast":null,"code":"import _initializerDefineProperty from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/sariq/projects/us-dv/client/us-dv/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _class, _descriptor, _descriptor2, _descriptor3, _temp;\n\nimport { observable, action, computed } from \"mobx\";\nimport ConfigStore from \"./configStore\";\nimport AuthStore from \"./AuthStore\";\nconst apis = {\n  applyApplication(data) {\n    console.log(data); //return ApiCaller.doPost('config/bot', null, data);\n  },\n\n  register(data) {\n    return fetch(ConfigStore.configData.domain + 'api/users/', {\n      method: 'POST',\n      headers: {\n        Accept: 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"user\": data\n      })\n    }).then(response => response.json()).then(responseJson => {\n      if (responseJson.user) {\n        console.log(responseJson);\n        localStorage.setItem('userData', responseJson); //AuthStore.login();\n      } else {}\n\n      return responseJson;\n    }).catch(error => {\n      console.error(error);\n    });\n  }\n\n};\nlet registrationStore = (_class = (_temp = class registrationStore {\n  constructor() {\n    _initializerDefineProperty(this, \"registrationData\", _descriptor, this);\n\n    _initializerDefineProperty(this, \"applicationData\", _descriptor2, this);\n\n    _initializerDefineProperty(this, \"registerInProgress\", _descriptor3, this);\n  }\n\n  registerUser() {\n    this.registerInProgress = true;\n    return apis.register(this.registrationData.personalDetails).then(data => {\n      return data;\n    }).finally(() => this.registerInProgress = false);\n  }\n\n  sendApplication() {\n    apis.applyApplication(this.applicationData);\n  }\n\n  handleApplicantDataChange(attr, value) {\n    this.applicationData.applicantInfo[attr] = value;\n  }\n\n  handleDataChange(attr, value, obj) {\n    this.applicationData[obj][attr] = value;\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \"registrationData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      personalDetails: {},\n      paymentData: {}\n    };\n  }\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \"applicationData\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return {\n      applicantInfo: {},\n      spouseInfo: {},\n      childrenInfo: [],\n      addressContact: {}\n    };\n  }\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \"registerInProgress\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return false;\n  }\n}), _applyDecoratedDescriptor(_class.prototype, \"registerUser\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"registerUser\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"sendApplication\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"sendApplication\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"handleApplicantDataChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"handleApplicantDataChange\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \"handleDataChange\", [action], Object.getOwnPropertyDescriptor(_class.prototype, \"handleDataChange\"), _class.prototype)), _class); //export default registrationStore;\n\nexport default new registrationStore();","map":{"version":3,"sources":["/Users/sariq/projects/us-dv/client/us-dv/src/stores/registrationStore.js"],"names":["observable","action","computed","ConfigStore","AuthStore","apis","applyApplication","data","console","log","register","fetch","configData","domain","method","headers","Accept","body","JSON","stringify","then","response","json","responseJson","user","localStorage","setItem","catch","error","registrationStore","registerUser","registerInProgress","registrationData","personalDetails","finally","sendApplication","applicationData","handleApplicantDataChange","attr","value","applicantInfo","handleDataChange","obj","paymentData","spouseInfo","childrenInfo","addressContact"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,EAA6BC,QAA7B,QAA4C,MAA5C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,MAAMC,IAAI,GAAG;AACTC,EAAAA,gBAAgB,CAACC,IAAD,EAAO;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EADmB,CAEnB;AACH,GAJQ;;AAKTG,EAAAA,QAAQ,CAAEH,IAAF,EAAO;AACX,WAAOI,KAAK,CAACR,WAAW,CAACS,UAAZ,CAAuBC,MAAvB,GAAgC,YAAjC,EAA+C;AACvDC,MAAAA,MAAM,EAAE,MAD+C;AAEvDC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AAEP,wBAAgB;AAFT,OAF8C;AAMvDC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AACnB,gBAAQZ;AADW,OAAf;AANiD,KAA/C,CAAL,CAUJa,IAVI,CAUEC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EAVf,EAWJF,IAXI,CAWEG,YAAD,IAAkB;AACtB,UAAGA,YAAY,CAACC,IAAhB,EAAqB;AACnBhB,QAAAA,OAAO,CAACC,GAAR,CAAYc,YAAZ;AACAE,QAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCH,YAAjC,EAFmB,CAInB;AACD,OALD,MAKK,CAEJ;;AACD,aAAOA,YAAP;AACD,KArBI,EAsBJI,KAtBI,CAsBGC,KAAD,IAAW;AAChBpB,MAAAA,OAAO,CAACoB,KAAR,CAAcA,KAAd;AACD,KAxBI,CAAP;AAyBH;;AA/BQ,CAAb;IAkCMC,iB,sBAAN,MAAMA,iBAAN,CAAwB;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAYZC,EAAAA,YAAR,GAAuB;AACnB,SAAKC,kBAAL,GAA0B,IAA1B;AACA,WAAO1B,IAAI,CAACK,QAAL,CAAc,KAAKsB,gBAAL,CAAsBC,eAApC,EAAqDb,IAArD,CAA2Db,IAAD,IAAQ;AAErE,aAAOA,IAAP;AAEH,KAJM,EAIJ2B,OAJI,CAII,MAAI,KAAKH,kBAAL,GAA0B,KAJlC,CAAP;AAKH;;AACOI,EAAAA,eAAR,GAA2B;AACvB9B,IAAAA,IAAI,CAACC,gBAAL,CAAsB,KAAK8B,eAA3B;AACH;;AACOC,EAAAA,yBAAR,CAAkCC,IAAlC,EAAwCC,KAAxC,EAA+C;AAC3C,SAAKH,eAAL,CAAqBI,aAArB,CAAmCF,IAAnC,IAA2CC,KAA3C;AACH;;AACOE,EAAAA,gBAAR,CAAyBH,IAAzB,EAA+BC,KAA/B,EAAsCG,GAAtC,EAA2C;AACvC,SAAKN,eAAL,CAAqBM,GAArB,EAA0BJ,IAA1B,IAAkCC,KAAlC;AACH;;AA5BmB,C,0FACnBvC,U;;;;;WAA4B;AACzBiC,MAAAA,eAAe,EAAC,EADS;AAEzBU,MAAAA,WAAW,EAAC;AAFa,K;;mFAI5B3C,U;;;;;WAA2B;AACxBwC,MAAAA,aAAa,EAAC,EADU;AAExBI,MAAAA,UAAU,EAAC,EAFa;AAGxBC,MAAAA,YAAY,EAAC,EAHW;AAIxBC,MAAAA,cAAc,EAAC;AAJS,K;;sFAM3B9C,U;;;;;WAA8B,K;;iEAC9BC,M,yJAQAA,M,sKAGAA,M,uKAGAA,M,uGAIL;;AACA,eAAe,IAAI4B,iBAAJ,EAAf","sourcesContent":["import { observable, action, computed} from \"mobx\";\nimport ConfigStore from \"./configStore\"\nimport AuthStore from \"./AuthStore\"\n\nconst apis = {\n    applyApplication(data) {\n        console.log(data);\n        //return ApiCaller.doPost('config/bot', null, data);\n    },\n    register (data){\n        return fetch(ConfigStore.configData.domain + 'api/users/', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              \"user\": data\n            }),\n          })\n          .then((response) => response.json())\n          .then((responseJson) => {\n            if(responseJson.user){\n              console.log(responseJson)\n              localStorage.setItem('userData', responseJson);\n\n              //AuthStore.login();\n            }else{\n             \n            }        \n            return responseJson;\n          })\n          .catch((error) => {\n            console.error(error);\n          });\n    }\n}\n\nclass registrationStore {\n    @observable registrationData={\n        personalDetails:{},\n        paymentData:{}\n    };\n    @observable applicationData={\n        applicantInfo:{},\n        spouseInfo:{},\n        childrenInfo:[],\n        addressContact:{}\n    };\n    @observable registerInProgress=false;\n    @action registerUser() {\n        this.registerInProgress = true;\n        return apis.register(this.registrationData.personalDetails).then((data)=>{\n\n            return data;\n            \n        }).finally(()=>this.registerInProgress = false);\n    }\n    @action sendApplication () {\n        apis.applyApplication(this.applicationData);\n    };\n    @action handleApplicantDataChange(attr, value) {\n        this.applicationData.applicantInfo[attr] = value;\n    }\n    @action handleDataChange(attr, value, obj) {\n        this.applicationData[obj][attr] = value;\n    }\n}\n//export default registrationStore;\nexport default new registrationStore();"]},"metadata":{},"sourceType":"module"}